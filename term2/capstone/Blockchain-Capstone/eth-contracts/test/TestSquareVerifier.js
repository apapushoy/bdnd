// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var SquareVerifier = artifacts.require('./SquareVerifier.sol');

const fs = require('fs');

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps


// Test verification with incorrect proof


contract('TestVerifier', accounts => {

    const account_one = accounts[0];
    var proof = null
    describe('proof', function () {
        beforeEach(async function () {
            this.contract = await SquareVerifier.new({from: account_one});
            let raw = fs.readFileSync('../zokrates/code/square/proof.json')
            proof = JSON.parse(raw)
        })

        it('correct proof', async function () {
            let ret = await this.contract.verifyTx.call(
                proof.proof.a, proof.proof.b, proof.proof.c, proof.inputs)
            assert.equal(true, ret)
        })

        it('wrong proof', async function () {
            let ret = await this.contract.verifyTx.call(
                proof.proof.a, proof.proof.b, proof.proof.c, [0,1])
            assert.equal(false, ret)
        })
    })
})
