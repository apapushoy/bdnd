pragma solidity ^0.5.0;
// Define a contract 'Supplychain'

import "../coffeeaccesscontrol/CustomerRole.sol";
import "../coffeeaccesscontrol/FarmerRole.sol";
import "../coffeeaccesscontrol/ShipperRole.sol";
import "../coffeeaccesscontrol/SupermarketRole.sol";
import "../coffeecore/Ownable.sol";


contract SupplyChain is Ownable, CustomerRole, FarmerRole, ShipperRole, SupermarketRole {

    // Define 'owner'
    address owner_;

    // Define a variable called 'upc' for Universal Product Code (UPC)
    uint  upc;

    // Define a variable called 'sku' for Stock Keeping Unit (SKU)
    uint  sku;

    // Define a public mapping 'items' that maps the UPC to an CoconutUnit.
    mapping (uint => CoconutUnit) items;

    // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash,
    // that track its journey through the supply chain -- to be sent from DApp.
    mapping (uint => string[]) itemsHistory;

    // Define enum 'State' with the following values:
    enum State {
        ReadyForHarvest, // 0
        Harvested,
        ForSaleByFarmer,
        SoldToBuyer,
        TransferredToBuyer,
        AwaitingShipping,
        Shipping,
        Shipped,
        ForSaleByBuyer,
        SoldToCustomer
    }

    State private constant DEFAULT_STATE = State.ReadyForHarvest;

    uint private constant MARKUP_FACTOR = 10;

    // Define a struct 'Item' with the following fields:
    struct CoconutUnit {
        uint    sku;  // Stock Keeping Unit (SKU)
        uint    upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Customer
        address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through the stages
        address originFarmerID; // Metamask-Ethereum address of the Farmer
        string  originFarmName; // Farmer Name
        string  originFarmInformation;  // Farmer Information
        string  originFarmLatitude; // Farm Latitude
        string  originFarmLongitude;  // Farm Longitude
        uint    productID;  // Product ID potentially a combination of upc + sku
        string  productNotes; // Product Notes
        uint    productPrice; // Product Price
        State   itemState;  // Product State as represented in the enum above
        address shipperID;  // Metamask-Ethereum address of the Shipper
        address superMarketID; // Metamask-Ethereum address of the Supermarket
        address customerID; // Metamask-Ethereum address of the Customer
    }

    event ReadyForHarvest(uint _upc);
    event Harvested(uint _upc);
    event ForSaleByFarmer(uint _upc);
    event SoldToBuyer(uint _upc);
    event TransferredToBuyer(uint _upc);
    event AwaitingShipping(uint _upc);
    event Shipping(uint _upc);
    event Shipped(uint _upc);
    event ForSaleByBuyer(uint _upc);
    event SoldToCustomer(uint _upc);

    // Define a modifer that checks to see if msg.sender == owner of the contract
    modifier onlyOwner() {
        require(msg.sender == owner_);
        _;
    }

    // Define a modifer that verifies the Caller
    modifier verifyCaller (address _address) {
        require(msg.sender == _address);
        _;
    }

    // Define a modifier that checks if the paid amount is sufficient to cover the price
    modifier paidEnough(uint _price) {
        require(msg.value >= _price);
        _;
    }

    // Define a modifier that checks the price and refunds the remaining balance
    modifier refundChange(uint _upc, address recepient) {
        _;
        uint _price = items[_upc].productPrice;
        uint amountToReturn = msg.value - _price;
        address payable payAddr = address(uint160(recepient));
        payAddr.transfer(amountToReturn);
    }

    modifier readyForHarvest(uint _upc) {
        require(items[_upc].itemState == State.ReadyForHarvest);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Harvested
    modifier harvested(uint _upc) {
        require(items[_upc].itemState == State.Harvested);
        _;
    }

    modifier forSaleByFarmer(uint _upc) {
        require(items[_upc].itemState == State.ForSaleByFarmer);
        _;
    }

    modifier soldToBuyer(uint _upc) {
        require(items[_upc].itemState == State.SoldToBuyer);
        _;
    }

    modifier transferredToBuyer(uint _upc) {
        require(items[_upc].itemState == State.TransferredToBuyer);
        _;
    }

    modifier awaitingShipping(uint _upc) {
        require(items[_upc].itemState == State.AwaitingShipping);
        _;
    }

    modifier shipping(uint _upc) {
        require(items[_upc].itemState == State.Shipping);
        _;
    }

    modifier isShipped(uint _upc) {
        require(items[_upc].itemState == State.Shipped);
        _;
    }

    modifier isForSaleByBuyer(uint _upc) {
        require(items[_upc].itemState == State.ForSaleByBuyer);
        _;
    }

    modifier soldToCustomer(uint _upc) {
        require(items[_upc].itemState == State.SoldToCustomer);
        _;
    }

    // In the constructor set 'owner' to the address that instantiated the contract
    // and set 'sku' to 1
    // and set 'upc' to 1
    constructor() public payable {
        owner_ = msg.sender;
        sku = 1;
        upc = 1;
    }

    // Define a function 'kill' if required
    function kill() public {
        address payable addr = address(uint160(owner_));
        if (msg.sender == addr) {
            selfdestruct(addr);
        }
    }

    function prepareForHarvest(uint _upc, address _originFarmerID, string memory _originFarmName,
        string memory _originFarmInformation,
        string  memory _originFarmLatitude, string  memory _originFarmLongitude, string memory _productNotes)
        public
        onlyFarmer
    {
        uint prodId = _upc * 10000 + sku;
        items[_upc] = CoconutUnit(sku, _upc, msg.sender, _originFarmerID, _originFarmName, _originFarmInformation,
        _originFarmLatitude, _originFarmLongitude, prodId, _productNotes, 0, DEFAULT_STATE, address(0), address(0), address(0));
        sku = sku + 1;
        emit ReadyForHarvest(_upc);
    }

    // Define a function 'harvestItem' that allows a farmer to mark an item 'Harvested'
    function harvestItem(uint _upc)
        public
        onlyFarmer
        readyForHarvest(_upc)
    {
        items[_upc].itemState = State.Harvested;
        emit Harvested(_upc);
    }

    function putUpForSale(uint _upc, uint price)
        public
        onlyFarmer
        harvested(_upc)
    {
        require(price > 0, "Invalid price");
        items[_upc].itemState = State.ForSaleByFarmer;
        items[_upc].productPrice = price;
        emit ForSaleByFarmer(_upc);
    }

    function buyerBuysCoconuts(uint _upc)
        public
        onlySupermarket
        forSaleByFarmer(_upc)
        payable
        paidEnough(items[_upc].productPrice)
        refundChange(_upc, msg.sender)
    {
        items[_upc].itemState = State.SoldToBuyer;
        items[_upc].superMarketID = msg.sender;
        address payable payAddr = address(uint160(items[_upc].originFarmerID));
        payAddr.transfer(items[_upc].productPrice);
        emit SoldToBuyer(_upc);
    }

    function transferToBuyer(uint _upc)
    public
    onlySupermarket
    soldToBuyer(_upc)
    {
        items[_upc].itemState = State.TransferredToBuyer;
        items[_upc].ownerID = msg.sender;
        emit TransferredToBuyer(_upc);
    }

    function submitShipment(uint _upc, address shipper)
    public
    onlySupermarket
    transferredToBuyer(_upc)
    {
        items[_upc].itemState = State.AwaitingShipping;
        items[_upc].shipperID = shipper;
        items[_upc].ownerID = shipper;
        emit AwaitingShipping(_upc);
    }

    function ship(uint _upc)
    public
    onlyShipper
    awaitingShipping(_upc)
    {
        items[_upc].itemState = State.Shipping;
        emit Shipping(_upc);
    }

    function shipped(uint _upc)
    public
    onlyShipper
    shipping(_upc)
    {
        items[_upc].itemState = State.Shipped;
        items[_upc].ownerID = items[_upc].superMarketID;
        emit Shipped(_upc);
    }

    function forSaleByBuyer(uint _upc)
    public
    onlySupermarket
    isShipped(_upc)
    {
        items[_upc].itemState = State.ForSaleByBuyer;
        items[_upc].productPrice = items[_upc].productPrice * (1 + (MARKUP_FACTOR / 100));
        emit ForSaleByBuyer(_upc);
    }

    function customerBuysCoconuts(uint _upc)
        public
        onlyCustomer
        isForSaleByBuyer(_upc)
        payable
        paidEnough(items[_upc].productPrice)
        refundChange(_upc, msg.sender)
    {
        items[_upc].itemState = State.SoldToCustomer;
        items[_upc].ownerID = msg.sender;
        items[_upc].customerID = msg.sender;
        address payable payAddr = address(uint160(items[_upc].superMarketID));
        payAddr.transfer(items[_upc].productPrice);
        emit SoldToCustomer(_upc);
    }

    function fetchItemBufferOne(uint _upc) public view returns
    (
        uint    itemSKU,
        uint    itemUPC,
        address ownerID,
        address originFarmerID,
        string  memory originFarmName,
        string  memory originFarmInformation,
        string  memory originFarmLatitude,
        string  memory originFarmLongitude
    )
    {
        itemSKU = items[_upc].sku;
        itemUPC = _upc;
        ownerID = items[_upc].ownerID;
        originFarmerID = items[_upc].originFarmerID;
        originFarmName = items[_upc].originFarmName;
        originFarmInformation = items[_upc].originFarmInformation;
        originFarmLatitude = items[_upc].originFarmLatitude;
        originFarmLongitude = items[_upc].originFarmLongitude;

        return
        (
            itemSKU,
            itemUPC,
            ownerID,
            originFarmerID,
            originFarmName,
            originFarmInformation,
            originFarmLatitude,
            originFarmLongitude
        );
    }

    // Define a function 'fetchItemBufferTwo' that fetches the data
    function fetchItemBufferTwo(uint _upc) public view returns
    (
        uint    itemSKU,
        uint    itemUPC,
        uint    productID,
        string  memory productNotes,
        uint    productPrice,
        uint    itemState,
        address shipperID,
        address superMarketID,
        address customerID
    )
    {
        itemSKU = items[_upc].sku;
        itemUPC = _upc;
        productID = items[_upc].productID;
        productNotes = items[_upc].productNotes;
        productPrice = items[_upc].productPrice;
        itemState = uint(items[_upc].itemState);
        shipperID = items[_upc].shipperID;
        superMarketID = items[_upc].superMarketID;
        customerID = items[_upc].customerID;

        return
        (
            itemSKU,
            itemUPC,
            productID,
            productNotes,
            productPrice,
            itemState,
            shipperID,
            superMarketID,
            customerID
        );
    }

}
