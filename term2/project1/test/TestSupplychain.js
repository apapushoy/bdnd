// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei("1", "ether")
    var itemState = 0
    const shipperID = accounts[2]
    const superMarketID = accounts[3]
    const customerID = accounts[4]
    const emptyAddress = '0x0000000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    // (0) 0xde33046e4018ef65b54bf897810ba0d48cc0fe58
    // (1) 0xa6be3e285c3d28e57879b85cc94a72865531c7b4
    // (2) 0x1d4d54a845f35128c26e0e7c8c8264e37885ee49
    // (3) 0x5ba027d805b2e24f0cae0a3b174a1142e7ecb75c
    // (4) 0x3c1e0d29111536e4eb58dcafdbb45c23cfb8e40d
    // (5) 0x43adc5d2730bc640738515f86d2a3e13eead0405
    // (6) 0xeb1cf4aab6f6d41490c758b01c3e1234f2da685f
    // (7) 0x120808c8a100fe0dc8244c7b2faca561f0de8448
    // (8) 0x2844bb6658fbe51a67aaeb34f6ca459e9de69fd7
    // (9) 0xcb880fc455d7b9c673cace471a86dccd073d4f95


    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Shipper: accounts[2] ", accounts[2])
    console.log("Supermarket/buyer: accounts[3] ", accounts[3])
    console.log("Customer: accounts[4] ", accounts[4])

    it("lets the farmer set the contract into the ready for harvest state", async() => {
        const supplyChain = await SupplyChain.deployed()

        var eventEmitted = false
        await supplyChain.contract.events.ReadyForHarvest((err, ev) => {
            eventEmitted = true
        })

        supplyChain.addFarmer(originFarmerID)

        await supplyChain.prepareForHarvest(upc, originFarmerID, originFarmName, originFarmInformation,
            originFarmLatitude, originFarmLongitude, productNotes, {from: originFarmerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], 1, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')

    })

    it("lets the farmer harvest the item", async() => {
        const supplyChain = await SupplyChain.deployed()

        var eventEmitted = false
        await supplyChain.contract.events.Harvested((err, ev) => {
            eventEmitted = true
        })

        await supplyChain.prepareForHarvest(upc, originFarmerID, originFarmName, originFarmInformation,
            originFarmLatitude, originFarmLongitude, productNotes, {from: originFarmerID})
        await supplyChain.harvestItem(upc, {from: originFarmerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], 2, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    it("lets the farmer put the coconuts up for sale", async() => {
        const supplyChain = await SupplyChain.deployed()

        var eventEmitted = false
        await supplyChain.contract.events.ForSaleByFarmer((err, ev) => {
            eventEmitted = true
        })

        await supplyChain.prepareForHarvest(upc, originFarmerID, originFarmName, originFarmInformation,
            originFarmLatitude, originFarmLongitude, productNotes, {from: originFarmerID})
        await supplyChain.harvestItem(upc, {from: originFarmerID})
        await supplyChain.putUpForSale(upc, productPrice, {from: originFarmerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], 3, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[4], web3.utils.toWei("1", "ether"), 'Error: Invalid item price')
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 3rd Test
    it("lets the buyer buy coconuts", async() => {
        const supplyChain = await SupplyChain.deployed()
        var eventEmitted = false
        await supplyChain.contract.events.SoldToBuyer((err, ev) => {
            eventEmitted = true
        })

        await supplyChain.prepareForHarvest(upc, originFarmerID, originFarmName, originFarmInformation,
            originFarmLatitude, originFarmLongitude, productNotes, {from: originFarmerID})
        await supplyChain.harvestItem(upc, {from: originFarmerID})
        await supplyChain.putUpForSale(upc, productPrice, {from: originFarmerID})
        await supplyChain.buyerBuysCoconuts(upc, {from: superMarketID, value: web3.utils.toWei("1.1", "ether")})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], 4, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[4], web3.utils.toWei("1", "ether"), 'Error: Invalid item price')
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[7], superMarketID, 'Error: Invalid supermarket id')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    it("lets the buyer transfer coconuts and take ownership of coconuts", async() => {
        const supplyChain = await SupplyChain.deployed()
        var eventEmitted = false
        await supplyChain.contract.events.TransferredToBuyer((err, ev) => {
            eventEmitted = true
        })

        await supplyChain.prepareForHarvest(upc, originFarmerID, originFarmName, originFarmInformation,
            originFarmLatitude, originFarmLongitude, productNotes , {from: originFarmerID})
        await supplyChain.harvestItem(upc, {from: originFarmerID})
        await supplyChain.putUpForSale(upc, productPrice, {from: originFarmerID})
        await supplyChain.buyerBuysCoconuts(upc, {from: superMarketID, value: web3.utils.toWei("1.1", "ether")})
        await supplyChain.transferToBuyer(upc, {from: superMarketID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], 5, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], superMarketID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[4], web3.utils.toWei("1", "ether"), 'Error: Invalid item price')
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[7], superMarketID, 'Error: Invalid supermarket id')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    it("lets the buyer submit coconuts for shipment", async() => {
        const supplyChain = await SupplyChain.deployed()
        var eventEmitted = false
        await supplyChain.contract.events.AwaitingShipping((err, ev) => {
            eventEmitted = true
        })

        await supplyChain.prepareForHarvest(upc, originFarmerID, originFarmName, originFarmInformation,
            originFarmLatitude, originFarmLongitude, productNotes , {from: originFarmerID})
        await supplyChain.harvestItem(upc, {from: originFarmerID})
        await supplyChain.putUpForSale(upc, productPrice, {from: originFarmerID})
        await supplyChain.buyerBuysCoconuts(upc, {from: superMarketID, value: web3.utils.toWei("1.1", "ether")})
        await supplyChain.transferToBuyer(upc, {from: superMarketID})
        await supplyChain.submitShipment(upc, shipperID, {from: superMarketID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], 6, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], shipperID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[4], web3.utils.toWei("1", "ether"), 'Error: Invalid item price')
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], shipperID, 'Error: Invalid shipper id')
        assert.equal(resultBufferTwo[7], superMarketID, 'Error: Invalid supermarket id')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    it("lets the shipper ship the coconuts", async() => {
        const supplyChain = await SupplyChain.deployed()
        var eventEmitted = false
        await supplyChain.contract.events.Shipping((err, ev) => {
            eventEmitted = true
        })

        await supplyChain.prepareForHarvest(upc, originFarmerID, originFarmName, originFarmInformation,
            originFarmLatitude, originFarmLongitude, productNotes , {from: originFarmerID})
        await supplyChain.harvestItem(upc, {from: originFarmerID})
        await supplyChain.putUpForSale(upc, productPrice, {from: originFarmerID})
        await supplyChain.buyerBuysCoconuts(upc, {from: superMarketID, value: web3.utils.toWei("1.1", "ether")})
        await supplyChain.transferToBuyer(upc, {from: superMarketID})
        await supplyChain.submitShipment(upc, shipperID, {from: superMarketID})
        await supplyChain.ship(upc, {from: shipperID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], 7, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], shipperID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[4], web3.utils.toWei("1", "ether"), 'Error: Invalid item price')
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], shipperID, 'Error: Invalid shipper id')
        assert.equal(resultBufferTwo[7], superMarketID, 'Error: Invalid supermarket id')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    it("lets the shipper complete shipping and transfer ownership back to buyer", async() => {
        const supplyChain = await SupplyChain.deployed()
        var eventEmitted = false
        await supplyChain.contract.events.Shipped((err, ev) => {
            eventEmitted = true
        })

        await supplyChain.prepareForHarvest(upc, originFarmerID, originFarmName, originFarmInformation,
            originFarmLatitude, originFarmLongitude, productNotes , {from: originFarmerID})
        await supplyChain.harvestItem(upc, {from: originFarmerID})
        await supplyChain.putUpForSale(upc, productPrice, {from: originFarmerID})
        await supplyChain.buyerBuysCoconuts(upc, {from: superMarketID, value: web3.utils.toWei("1.1", "ether")})
        await supplyChain.transferToBuyer(upc, {from: superMarketID})
        await supplyChain.submitShipment(upc, shipperID, {from: superMarketID})
        await supplyChain.ship(upc, {from: shipperID})
        await supplyChain.shipped(upc, {from: shipperID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], 8, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], superMarketID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[4], web3.utils.toWei("1", "ether"), 'Error: Invalid item price')
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], shipperID, 'Error: Invalid shipper id')
        assert.equal(resultBufferTwo[7], superMarketID, 'Error: Invalid supermarket id')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    it("lets the buyer list the coconuts for sale to customers at a markup", async() => {
        const supplyChain = await SupplyChain.deployed()
        var eventEmitted = false
        await supplyChain.contract.events.ForSaleByBuyer((err, ev) => {
            eventEmitted = true
        })

        await supplyChain.prepareForHarvest(upc, originFarmerID, originFarmName, originFarmInformation,
            originFarmLatitude, originFarmLongitude, productNotes , {from: originFarmerID})
        await supplyChain.harvestItem(upc, {from: originFarmerID})
        await supplyChain.putUpForSale(upc, productPrice, {from: originFarmerID})
        await supplyChain.buyerBuysCoconuts(upc, {from: superMarketID, value: web3.utils.toWei("1.1", "ether")})
        await supplyChain.transferToBuyer(upc, {from: superMarketID})
        await supplyChain.submitShipment(upc, shipperID, {from: superMarketID})
        await supplyChain.ship(upc, {from: shipperID})
        await supplyChain.shipped(upc, {from: shipperID})
        await supplyChain.forSaleByBuyer(upc, {from: superMarketID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], 9, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], superMarketID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[4], web3.utils.toWei("1.1", "ether"), 'Error: Invalid item price')
        assert.equal(resultBufferTwo[5], 8, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], shipperID, 'Error: Invalid shipper id')
        assert.equal(resultBufferTwo[7], superMarketID, 'Error: Invalid supermarket id')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    it("the customer buy the coconuts", async() => {
        const supplyChain = await SupplyChain.deployed()
        var eventEmitted = false
        await supplyChain.contract.events.SoldToCustomer((err, ev) => {
            eventEmitted = true
        })

        await supplyChain.prepareForHarvest(upc, originFarmerID, originFarmName, originFarmInformation,
            originFarmLatitude, originFarmLongitude, productNotes , {from: originFarmerID})
        await supplyChain.harvestItem(upc, {from: originFarmerID})
        await supplyChain.putUpForSale(upc, productPrice, {from: originFarmerID})
        await supplyChain.buyerBuysCoconuts(upc, {from: superMarketID, value: web3.utils.toWei("1.1", "ether")})
        await supplyChain.transferToBuyer(upc, {from: superMarketID})
        await supplyChain.submitShipment(upc, shipperID, {from: superMarketID})
        await supplyChain.ship(upc, {from: shipperID})
        await supplyChain.shipped(upc, {from: shipperID})
        await supplyChain.forSaleByBuyer(upc, {from: superMarketID})
        await supplyChain.customerBuysCoconuts(upc, {from: customerID, value: web3.utils.toWei("1.1", "ether")})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], 10, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], customerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[4], web3.utils.toWei("1.1", "ether"), 'Error: Invalid item price')
        assert.equal(resultBufferTwo[5], 9, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], shipperID, 'Error: Invalid shipper id')
        assert.equal(resultBufferTwo[7], superMarketID, 'Error: Invalid supermarket id')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    it("retrieves fetchItemBufferOne correctly", async() => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.prepareForHarvest(upc, originFarmerID, originFarmName, originFarmInformation,
            originFarmLatitude, originFarmLongitude, productNotes , {from: originFarmerID})
        await supplyChain.fetchItemBufferOne(upc)
        const resultBufferOne = await supplyChain.fetchItemBufferOne(upc)

        assert.equal(resultBufferOne[0], 11, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
    })

    it("retrieves fetchItemBufferTwo correctly", async() => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.prepareForHarvest(upc, originFarmerID, originFarmName, originFarmInformation,
            originFarmLatitude, originFarmLongitude, productNotes, {from: originFarmerID})
        await supplyChain.fetchItemBufferOne(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo(upc)

        assert.equal(resultBufferTwo[0], 12, 'Error: Invalid sku')
        assert.equal(resultBufferTwo[1], 1, 'Error: Invalid upc')
        assert.equal(resultBufferTwo[2], 10012, 'Error: Invalid product id')
        assert.equal(resultBufferTwo[3], "Best beans for Espresso", 'Error: Invalid product notes')
        assert.equal(resultBufferTwo[4], 0, 'Error: Invalid item price')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], emptyAddress, 'Error: Invalid shipper id')
        assert.equal(resultBufferTwo[7], emptyAddress, 'Error: Invalid supermarket id')
        assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Invalid customer id')
    })

});
